//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 10 23:24:40 EST 2019
//----------------------------------------------------
package CompiladorHTML;

import java_cup.runtime.*;

/**
 * CUP v0.11a beta 20060608 generated parser.
 *
 * @version Sun Nov 10 23:24:40 EST 2019
 */
public class parser extends java_cup.runtime.lr_parser {

    /**
     * Default constructor.
     */
    public parser() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    public parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\033\000\002\002\004\000\002\002\004\000\002\002"
        + "\003\000\002\003\003\000\002\003\003\000\002\003\003"
        + "\000\002\003\003\000\002\003\003\000\002\004\017\000"
        + "\002\004\020\000\002\005\003\000\002\005\003\000\002"
        + "\005\003\000\002\005\003\000\002\005\003\000\002\006"
        + "\017\000\002\007\004\000\002\007\003\000\002\010\010"
        + "\000\002\011\010\000\002\012\005\000\002\013\010\000"
        + "\002\014\004\000\002\014\003\000\002\015\007\000\002"
        + "\015\007\000\002\015\007"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\117\000\004\017\011\001\002\000\006\002\ufffc\017"
        + "\ufffc\001\002\000\006\002\ufffe\017\ufffe\001\002\000\006"
        + "\002\ufffd\017\ufffd\001\002\000\006\002\ufffa\017\ufffa\001"
        + "\002\000\006\002\121\017\011\001\002\000\014\004\015"
        + "\013\014\014\020\026\016\027\017\001\002\000\006\002"
        + "\uffff\017\uffff\001\002\000\006\002\ufffb\017\ufffb\001\002"
        + "\000\004\016\117\001\002\000\004\005\054\001\002\000"
        + "\004\025\050\001\002\000\004\025\044\001\002\000\004"
        + "\023\021\001\002\000\004\022\022\001\002\000\004\021"
        + "\023\001\002\000\004\024\024\001\002\000\004\021\025"
        + "\001\002\000\004\016\026\001\002\000\004\017\031\001"
        + "\002\000\004\017\040\001\002\000\004\017\ufff0\001\002"
        + "\000\004\015\032\001\002\000\004\025\033\001\002\000"
        + "\004\020\034\001\002\000\004\015\035\001\002\000\004"
        + "\016\036\001\002\000\004\017\uffef\001\002\000\004\017"
        + "\ufff1\001\002\000\006\015\032\020\041\001\002\000\004"
        + "\014\042\001\002\000\004\016\043\001\002\000\006\002"
        + "\ufff2\017\ufff2\001\002\000\004\020\045\001\002\000\004"
        + "\027\046\001\002\000\004\016\047\001\002\000\006\002"
        + "\uffec\017\uffec\001\002\000\004\020\051\001\002\000\004"
        + "\026\052\001\002\000\004\016\053\001\002\000\006\002"
        + "\uffee\017\uffee\001\002\000\004\022\055\001\002\000\004"
        + "\021\056\001\002\000\014\006\064\007\062\010\057\011"
        + "\061\012\063\001\002\000\004\021\ufff5\001\002\000\004"
        + "\021\065\001\002\000\004\021\ufff4\001\002\000\004\021"
        + "\ufff6\001\002\000\004\021\ufff3\001\002\000\004\021\ufff7"
        + "\001\002\000\004\023\066\001\002\000\004\022\067\001"
        + "\002\000\004\021\070\001\002\000\004\024\071\001\002"
        + "\000\004\021\072\001\002\000\012\016\077\031\076\032"
        + "\073\033\075\001\002\000\004\022\113\001\002\000\012"
        + "\016\uffea\031\uffea\032\uffea\033\uffea\001\002\000\004\022"
        + "\107\001\002\000\004\022\103\001\002\000\006\002\ufff9"
        + "\017\ufff9\001\002\000\012\016\102\031\076\032\073\033"
        + "\075\001\002\000\012\016\uffeb\031\uffeb\032\uffeb\033\uffeb"
        + "\001\002\000\006\002\ufff8\017\ufff8\001\002\000\004\021"
        + "\104\001\002\000\004\030\105\001\002\000\004\021\106"
        + "\001\002\000\012\016\uffe9\031\uffe9\032\uffe9\033\uffe9\001"
        + "\002\000\004\021\110\001\002\000\004\030\111\001\002"
        + "\000\004\021\112\001\002\000\012\016\uffe7\031\uffe7\032"
        + "\uffe7\033\uffe7\001\002\000\004\021\114\001\002\000\004"
        + "\030\115\001\002\000\004\021\116\001\002\000\012\016"
        + "\uffe8\031\uffe8\032\uffe8\033\uffe8\001\002\000\006\002\uffed"
        + "\017\uffed\001\002\000\006\002\001\017\001\001\002\000"
        + "\004\002\000\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\117\000\020\002\007\003\011\004\004\006\005\011"
        + "\003\012\012\013\006\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\016\003"
        + "\117\004\004\006\005\011\003\012\012\013\006\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\006\007\026\010\027\001\001\000\004\010\036\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\004"
        + "\005\057\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\006\014\077"
        + "\015\073\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\004"
        + "\015\100\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$parser$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$parser$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 1;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    public String errsin = "";

    public void syntax_error(Symbol token) {
        errsin += ("\nError de sintaxis en pos " + (token.left + 1) + "," + (token.right + 1));
        throw new UnsupportedOperationException("\nError de sintaxis en pos " + (token.left + 1) + "," + (token.right + 1));

    }

}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$parser$actions {

    private final parser parser;

    /**
     * Constructor
     */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /**
     * Method with the actual generated action code.
     */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack CUP$parser$stack,
            int CUP$parser$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // K ::= maxlength igual comilla num comilla 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("K", 11, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // K ::= max igual comilla num comilla 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("K", 11, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // K ::= min igual comilla num comilla 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("K", 11, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // Z ::= K 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("Z", 10, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // Z ::= Z K 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("Z", 10, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // G ::= menor h1 texto division h1 mayor 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("G", 9, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // C ::= menor coments mayor 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("C", 8, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // L ::= menor label texto division label mayor 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("L", 7, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // R ::= menor option texto division option mayor 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("R", 6, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // H ::= R 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("H", 5, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // H ::= H R 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("H", 5, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // S ::= menor lista name igual comilla id comilla mayor H menor division lista mayor 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("S", 4, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 12)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // T ::= checkbox 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("T", 3, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // T ::= radio 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("T", 3, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // T ::= date 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("T", 3, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // T ::= number 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("T", 3, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // T ::= text 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("T", 3, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // I ::= menor input type igual comilla T comilla name igual comilla id comilla Z mayor 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("I", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 13)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // I ::= menor input type igual comilla T comilla name igual comilla id comilla mayor 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("I", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 12)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // O ::= G 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("O", 1, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // O ::= C 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("O", 1, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // O ::= L 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("O", 1, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // O ::= S 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("O", 1, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // O ::= I 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("O", 1, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // P ::= O 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("P", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // $START ::= P EOF 
            {
                Object RESULT = null;
                int start_valleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int start_valright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // P ::= P O 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("P", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }
}
